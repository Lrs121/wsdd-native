name: Build

on: 
  push:
    branches: 
      - '*'
      - '*/**'
    paths-ignore:
      - 'README.md'
      - '.gitignore'
      - 'LICENSE'
      - 'CHANGELOG.md'
      - 'Acknowledgements.md'
      - 'bom.json'
      - '.github/workflows/publish.yml'
      - 'installers/mac/notarize'
      - 'installers/mac/github-sign'
      - 'tools/**'


jobs:
  selfhosted:
    concurrency: ${{ matrix.remote_host }}
    runs-on: [self-hosted, server]
    strategy:
      fail-fast: false
      matrix:
        include: 
        # - remote_host: debian-11
        #   installer: deb-systemd
        # - remote_host: debian-11-arm
        #   installer: deb-systemd
        - remote_host: ubuntu-20.04-arm
          installer: deb-systemd
        # - remote_host: ubuntu-22.04-arm
        #   installer: deb-systemd
        - remote_host: ubuntu-23.04
          installer: deb-systemd
        - remote_host: ubuntu-23.04-arm
          installer: deb-systemd
        - remote_host: freebsd-13.1
          installer: bsd
        - remote_host: freebsd-13.1-arm
          installer: bsd
        - remote_host: centos-9
          installer: rpm-systemd
        - remote_host: centos-9-arm
          installer: rpm-systemd

    steps:
    - name: Run remote build
      run: |
        "$RUNNER_TOOLS_PATH"/run-agent gh-${{ matrix.remote_host }} <<'EOF'
        set -e
        cd work/wsdd-native
        git fetch --all
        git fetch -f --prune --tags
        git reset --hard ${{ github.sha }}
        if [[ '${{ matrix.remote_host }}' == 'ubuntu-20.04-arm' ]]; then
          export CC=gcc-10
          export CXX=g++-10
        fi
        if [[ '${{ matrix.installer }}' == 'rpm-systemd' ]]; then
            export PGP_KEY_NAME='${{ secrets.PGP_KEY_NAME }}'
            export PGP_KEY_PASSWD='${{ secrets.PGP_KEY_PASSWD }}'
        fi
        [ -d "out" ] && tools/uncache out
        cmake -S . -B out -DCMAKE_BUILD_TYPE=RelWithDebInfo 
        installers/${{ matrix.installer }}/build.py --sign . out
        EOF

  local:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include: 
        # - os: ubuntu-22.04
        #   installer: deb-systemd
        - os: ubuntu-20.04
          installer: deb-systemd
        - os: macos-latest
          installer: mac
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Collect System Info
      id: system-info
      uses: kenchan0130/actions-system-info@master

    - name: Cache Build Dir
      id: cache-build-dir
      uses: actions/cache@v3
      with:
        path: out
        key: ${{ runner.os }}-${{ steps.system-info.outputs.release }}-out

    - name: Setup Linux
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libsystemd-dev
        if [[ '${{ matrix.os }}' == 'ubuntu-20.04' ]]; then
          echo "CC=gcc-10"  >> $GITHUB_ENV
          echo "CXX=g++-10" >> $GITHUB_ENV
        fi

    - name: Configure
      run: |
          [ -d "out" ] && tools/uncache out
          cmake -S . -B out \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            "-DCMAKE_OSX_ARCHITECTURES=x86_64;arm64" \
            -DWSDDN_MACOS_BUILD_WRAPPER=ON 

    - name: Build
      run: |
          if [[ '${{ runner.os }}' == 'Linux' ]]; then

            installers/${{ matrix.installer }}/build.py --sign . out

          elif [[ '${{ runner.os }}' == 'macOS' ]]; then
            
            export SIGN_CERTIFICATE='${{ secrets.SIGN_CERTIFICATE }}'
            export SIGN_CERTIFICATE_PWD='${{ secrets.SIGN_CERTIFICATE_PWD }}'
            export KEYCHAIN_PWD='${{ secrets.KEYCHAIN_PWD }}'
            export NOTARIZE_USER='${{ secrets.NOTARIZE_USER }}'
            export NOTARIZE_PWD='${{ secrets.NOTARIZE_PWD }}'
            installers/mac/set-github-keychain

            installers/${{ matrix.installer }}/build.py --sign . out

          fi





